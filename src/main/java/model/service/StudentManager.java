package model.service;

import java.sql.SQLException;
import java.util.List;

import model.Student;
import model.dao.StudentDAO;

/**
 * 사용자 관리 API를 사용하는 개발자들이 직접 접근하게 되는 클래스.
 * UserDAO를 이용하여 데이터베이스에 데이터 조작 작업이 가능하도록 하며,
 * 데이터베이스의 데이터들을 이용하여 비지니스 로직을 수행하는 역할을 한다.
 * 비지니스 로직이 복잡한 경우에는 비지니스 로직만을 전담하는 클래스를 
 * 별도로 둘 수 있다.
 */
public class StudentManager {
	private static StudentManager userMan = new StudentManager();
	private StudentDAO studentDao;
	private StudentAnalysis userAanlysis;

	private StudentManager() {
		try {
			studentDao = new StudentDAO();
			/*userAanlysis = new UserAnalysis(studentDao);*/
		} catch (Exception e) {
			e.printStackTrace();
		}			
	}
	
	public static StudentManager getInstance() {
		return userMan;
	}
	
	public int create(Student student) throws SQLException, ExistingStudentException {
		if (studentDao.existingUser(student.getStudentId()) == true) {
			throw new ExistingStudentException(student.getStudentId() + "는 존재하는 아이디입니다.");
		}
		return studentDao.create(student);
	}

	public int update(Student student) throws SQLException, StudentNotFoundException {
		return studentDao.update(student);
	}	

	public int remove(String studentId) throws SQLException, StudentNotFoundException {

		return studentDao.remove(studentId);
	}

	public Student findStudent(String studentId)
		throws SQLException, StudentNotFoundException {
		Student student = studentDao.findStudent(studentId);
		
		if (student == null) {
			throw new StudentNotFoundException(studentId + "는 존재하지 않는 아이디입니다.");
		}		
		return student;
	}


	public List<Student> findStudentList() throws SQLException {
			return studentDao.findStudentList();
	}

	public List<Student> findStudentList(int currentPage, int countPerPage)
		throws SQLException {
		return studentDao.findStudentList(currentPage, countPerPage);
	}


	public boolean login(String studentId, String password)
		throws SQLException, StudentNotFoundException, PasswordMismatchException {
		Student student = findStudent(studentId);

		if (!student.matchPassword(password)) {
			throw new PasswordMismatchException("비밀번호가 일치하지 않습니다.");
		}
		return true;
	}



	public StudentDAO getStudentDao() {
		return this.studentDao;
	}
}
